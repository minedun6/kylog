// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Data Integration
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package kylogger.company_migration_0_1;

import routines.Numeric;
import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.TalendString;
import routines.StringHandling;
import routines.Relational;
import routines.TalendDate;
import routines.Mathematical;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 





@SuppressWarnings("unused")

/**
 * Job: Company_Migration Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.3.1.20161216_1026
 * @status 
 */
public class Company_Migration implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";

	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends java.util.Properties {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
		}

	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "Company_Migration";
	private final String projectName = "KYLOGGER";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			 globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent);
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				Company_Migration.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(Company_Migration.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMysqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_3_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMap_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlOutput_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_3_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_2_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tAdvancedHash_row4_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMysqlInput_4_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMysqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_2_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_3_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMysqlInput_4_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		






public static class output1Struct implements routines.system.IPersistableRow<output1Struct> {
    final static byte[] commonByteArrayLock_KYLOGGER_Company_Migration = new byte[0];
    static byte[] commonByteArray_KYLOGGER_Company_Migration = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String trn;

				public String getTrn () {
					return this.trn;
				}
				
			    public String customs;

				public String getCustoms () {
					return this.customs;
				}
				
			    public String address;

				public String getAddress () {
					return this.address;
				}
				
			    public String comment;

				public String getComment () {
					return this.comment;
				}
				
			    public String logo;

				public String getLogo () {
					return this.logo;
				}
				
			    public Integer type;

				public Integer getType () {
					return this.type;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				
			    public java.util.Date deleted_at;

				public java.util.Date getDeleted_at () {
					return this.deleted_at;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final output1Struct other = (output1Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(output1Struct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.trn = this.trn;
	            other.customs = this.customs;
	            other.address = this.address;
	            other.comment = this.comment;
	            other.logo = this.logo;
	            other.type = this.type;
	            other.created_at = this.created_at;
	            other.updated_at = this.updated_at;
	            other.deleted_at = this.deleted_at;
	            
	}

	public void copyKeysDataTo(output1Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_KYLOGGER_Company_Migration.length) {
				if(length < 1024 && commonByteArray_KYLOGGER_Company_Migration.length == 0) {
   					commonByteArray_KYLOGGER_Company_Migration = new byte[1024];
				} else {
   					commonByteArray_KYLOGGER_Company_Migration = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_KYLOGGER_Company_Migration, 0, length);
			strReturn = new String(commonByteArray_KYLOGGER_Company_Migration, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_KYLOGGER_Company_Migration) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.name = readString(dis);
					
					this.trn = readString(dis);
					
					this.customs = readString(dis);
					
					this.address = readString(dis);
					
					this.comment = readString(dis);
					
					this.logo = readString(dis);
					
						this.type = readInteger(dis);
					
					this.created_at = readDate(dis);
					
					this.updated_at = readDate(dis);
					
					this.deleted_at = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.trn,dos);
					
					// String
				
						writeString(this.customs,dos);
					
					// String
				
						writeString(this.address,dos);
					
					// String
				
						writeString(this.comment,dos);
					
					// String
				
						writeString(this.logo,dos);
					
					// Integer
				
						writeInteger(this.type,dos);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// java.util.Date
				
						writeDate(this.updated_at,dos);
					
					// java.util.Date
				
						writeDate(this.deleted_at,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",trn="+trn);
		sb.append(",customs="+customs);
		sb.append(",address="+address);
		sb.append(",comment="+comment);
		sb.append(",logo="+logo);
		sb.append(",type="+String.valueOf(type));
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
		sb.append(",deleted_at="+String.valueOf(deleted_at));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(output1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_KYLOGGER_Company_Migration = new byte[0];
    static byte[] commonByteArray_KYLOGGER_Company_Migration = new byte[0];

	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public Long societe_id;

				public Long getSociete_id () {
					return this.societe_id;
				}
				
			    public java.util.Date deleted_at;

				public java.util.Date getDeleted_at () {
					return this.deleted_at;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_KYLOGGER_Company_Migration) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.societe_id = null;
           				} else {
           			    	this.societe_id = dis.readLong();
           				}
					
					this.deleted_at = readDate(dis);
					
					this.created_at = readDate(dis);
					
					this.updated_at = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// Long
				
						if(this.societe_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.societe_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.deleted_at,dos);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// java.util.Date
				
						writeDate(this.updated_at,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",societe_id="+String.valueOf(societe_id));
		sb.append(",deleted_at="+String.valueOf(deleted_at));
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tMysqlInput_1Struct implements routines.system.IPersistableRow<after_tMysqlInput_1Struct> {
    final static byte[] commonByteArrayLock_KYLOGGER_Company_Migration = new byte[0];
    static byte[] commonByteArray_KYLOGGER_Company_Migration = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public Long societe_id;

				public Long getSociete_id () {
					return this.societe_id;
				}
				
			    public java.util.Date deleted_at;

				public java.util.Date getDeleted_at () {
					return this.deleted_at;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tMysqlInput_1Struct other = (after_tMysqlInput_1Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tMysqlInput_1Struct other) {

		other.id = this.id;
	            other.societe_id = this.societe_id;
	            other.deleted_at = this.deleted_at;
	            other.created_at = this.created_at;
	            other.updated_at = this.updated_at;
	            
	}

	public void copyKeysDataTo(after_tMysqlInput_1Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_KYLOGGER_Company_Migration) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.societe_id = null;
           				} else {
           			    	this.societe_id = dis.readLong();
           				}
					
					this.deleted_at = readDate(dis);
					
					this.created_at = readDate(dis);
					
					this.updated_at = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// Long
				
						if(this.societe_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.societe_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.deleted_at,dos);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// java.util.Date
				
						writeDate(this.updated_at,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",societe_id="+String.valueOf(societe_id));
		sb.append(",deleted_at="+String.valueOf(deleted_at));
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tMysqlInput_1Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tMysqlInput_2Process(globalMap);

		row1Struct row1 = new row1Struct();
output1Struct output1 = new output1Struct();





	
	/**
	 * [tMysqlOutput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_1", false);
		start_Hash.put("tMysqlOutput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("output1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_1 = 0;
		
    	class BytesLimit65535_tMysqlOutput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_1().limitLog4jByte();






int nb_line_tMysqlOutput_1 = 0;
int nb_line_update_tMysqlOutput_1 = 0;
int nb_line_inserted_tMysqlOutput_1 = 0;
int nb_line_deleted_tMysqlOutput_1 = 0;
int nb_line_rejected_tMysqlOutput_1 = 0;

int deletedCount_tMysqlOutput_1=0;
int updatedCount_tMysqlOutput_1=0;
int insertedCount_tMysqlOutput_1=0;

int rejectedCount_tMysqlOutput_1=0;

String tableName_tMysqlOutput_1 = "companies";
boolean whetherReject_tMysqlOutput_1 = false;

java.util.Calendar calendar_tMysqlOutput_1 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_1.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
calendar_tMysqlOutput_1.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_1 = calendar_tMysqlOutput_1.getTime().getTime();
long date_tMysqlOutput_1;

java.sql.Connection conn_tMysqlOutput_1 = null;
		String dbProperties_tMysqlOutput_1 = "noDatetimeStringSync=true&zeroDateTimeBehavior=convertToNull";
		String url_tMysqlOutput_1 = null;
		if(dbProperties_tMysqlOutput_1 == null || dbProperties_tMysqlOutput_1.trim().length() == 0) {
			url_tMysqlOutput_1 = "jdbc:mysql://" + "127.0.0.1" + ":" + "33060" + "/" + "kylogger" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_1 = "noDatetimeStringSync=true&zeroDateTimeBehavior=convertToNull";
			if (!properties_tMysqlOutput_1.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_1 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_1 = "jdbc:mysql://" + "127.0.0.1" + ":" + "33060" + "/" + "kylogger" + "?" + properties_tMysqlOutput_1;
		}
		String driverClass_tMysqlOutput_1 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_1 = "homestead";
		

		 
	final String decryptedPassword_tMysqlOutput_1 = routines.system.PasswordEncryptUtil.decryptPassword("abf4f1fe565f5343");

		String dbPwd_tMysqlOutput_1 = decryptedPassword_tMysqlOutput_1;
		java.lang.Class.forName(driverClass_tMysqlOutput_1);
		
		conn_tMysqlOutput_1 = java.sql.DriverManager.getConnection(url_tMysqlOutput_1, dbUser_tMysqlOutput_1, dbPwd_tMysqlOutput_1);
		
	
	resourceMap.put("conn_tMysqlOutput_1", conn_tMysqlOutput_1);
        conn_tMysqlOutput_1.setAutoCommit(false);
        int commitEvery_tMysqlOutput_1 = 10000;
        int commitCounter_tMysqlOutput_1 = 0;

int count_tMysqlOutput_1=0;
    	

				String insert_tMysqlOutput_1 = "INSERT INTO `" + "companies" + "` (`id`,`name`,`trn`,`customs`,`address`,`comment`,`logo`,`type`,`created_at`,`updated_at`,`deleted_at`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tMysqlOutput_1 = 100;
	   			int batchSizeCounter_tMysqlOutput_1=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_1 = conn_tMysqlOutput_1.prepareStatement(insert_tMysqlOutput_1);


 



/**
 * [tMysqlOutput_1 begin ] stop
 */



	
	/**
	 * [tMap_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_1", false);
		start_Hash.put("tMap_1", System.currentTimeMillis());
		
	
	currentComponent="tMap_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_1 = 0;
		
    	class BytesLimit65535_tMap_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_1().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct>) 
					globalMap.get( "tHash_Lookup_row2" ))
					;					
					
	

row2Struct row2HashKey = new row2Struct();
row2Struct row2Default = new row2Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_1__Struct  {
	String name;
	Integer type;
	String trn;
	String customs;
	String address;
	String comment;
	String logo;
}
Var__tMap_1__Struct Var__tMap_1 = new Var__tMap_1__Struct();
// ###############################

// ###############################
// # Outputs initialization
output1Struct output1_tmp = new output1Struct();
// ###############################

        
        



        









 



/**
 * [tMap_1 begin ] stop
 */



	
	/**
	 * [tMysqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_1", false);
		start_Hash.put("tMysqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_1";

	
		int tos_count_tMysqlInput_1 = 0;
		
    	class BytesLimit65535_tMysqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_1().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_1 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_1.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_1 = calendar_tMysqlInput_1.getTime();
		    int nb_line_tMysqlInput_1 = 0;
		    java.sql.Connection conn_tMysqlInput_1 = null;
				String driverClass_tMysqlInput_1 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_1);
			   	String dbUser_tMysqlInput_1 = "homestead";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_1 = routines.system.PasswordEncryptUtil.decryptPassword("abf4f1fe565f5343");
			   	
		        String dbPwd_tMysqlInput_1 = decryptedPassword_tMysqlInput_1;
		        
				
				String url_tMysqlInput_1 = "jdbc:mysql://" + "127.0.0.1" + ":" + "33060" + "/" + "kylogistique" + "?" + "noDatetimeStringSync=true&zeroDateTimeBehavior=convertToNull";
				
				conn_tMysqlInput_1 = java.sql.DriverManager.getConnection(url_tMysqlInput_1,dbUser_tMysqlInput_1,dbPwd_tMysqlInput_1);
		        
		    
			java.sql.Statement stmt_tMysqlInput_1 = conn_tMysqlInput_1.createStatement();

		    String dbquery_tMysqlInput_1 = "SELECT \n  `clients`.`id`, \n  `clients`.`societe_id`, \n  `clients`.`deleted_at`, \n  `clients`.`created_at`, \n  `clients`.`updated_at`\nFROM `clients`";
			

                       globalMap.put("tMysqlInput_1_QUERY",dbquery_tMysqlInput_1);

		    java.sql.ResultSet rs_tMysqlInput_1 = null;
		try{
		    rs_tMysqlInput_1 = stmt_tMysqlInput_1.executeQuery(dbquery_tMysqlInput_1);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_1 = rs_tMysqlInput_1.getMetaData();
		    int colQtyInRs_tMysqlInput_1 = rsmd_tMysqlInput_1.getColumnCount();

		    String tmpContent_tMysqlInput_1 = null;
		    
		    
		    while (rs_tMysqlInput_1.next()) {
		        nb_line_tMysqlInput_1++;
		        
							if(colQtyInRs_tMysqlInput_1 < 1) {
								row1.id = 0;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(1) != null) {
                row1.id = rs_tMysqlInput_1.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 2) {
								row1.societe_id = null;
							} else {
		                          
            if(rs_tMysqlInput_1.getObject(2) != null) {
                row1.societe_id = rs_tMysqlInput_1.getLong(2);
            } else {
                    row1.societe_id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_1 < 3) {
								row1.deleted_at = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(3) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(3);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row1.deleted_at = rs_tMysqlInput_1.getTimestamp(3);
	            } else {
	                row1.deleted_at = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row1.deleted_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_1 < 4) {
								row1.created_at = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(4) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(4);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row1.created_at = rs_tMysqlInput_1.getTimestamp(4);
	            } else {
	                row1.created_at = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row1.created_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_1 < 5) {
								row1.updated_at = null;
							} else {
										
	        if(rs_tMysqlInput_1.getString(5) != null) {
	            String dateString_tMysqlInput_1 = rs_tMysqlInput_1.getString(5);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_1) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_1)) {
	                row1.updated_at = rs_tMysqlInput_1.getTimestamp(5);
	            } else {
	                row1.updated_at = (java.util.Date) year0_tMysqlInput_1.clone();
	            }
	        } else {
	            row1.updated_at =  null;
	        }			 
		                    }
					

 



/**
 * [tMysqlInput_1 begin ] stop
 */
	
	/**
	 * [tMysqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 


	tos_count_tMysqlInput_1++;

/**
 * [tMysqlInput_1 main ] stop
 */

	
	/**
	 * [tMap_1 main ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_1 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_1 = false;
		  boolean mainRowRejected_tMap_1 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row2" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow2 = false;
       		  	    	
       		  	    	
 							row2Struct row2ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_1) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_1 = false;
								
	                        		    	Object exprKeyValue_row2__id = row1.societe_id;
	                        		    	if(exprKeyValue_row2__id == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_1 = true;
	                        		    	} else {
                        		    			row2HashKey.id = (long)(Long) exprKeyValue_row2__id;
                        		    		}
                        		    		

								
		                        	row2HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_1) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row2.lookup( row2HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row2 != null && tHash_Lookup_row2.getCount(row2HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row2' and it contains more one result from keys :  row2.id = '" + row2HashKey.id + "'");
								} // G 071
							

							row2Struct row2 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row2Struct fromLookup_row2 = null;
							row2 = row2Default;
										 
							
								 
							
							
								if (tHash_Lookup_row2 !=null && tHash_Lookup_row2.hasNext()) { // G 099
								
							
								
								fromLookup_row2 = tHash_Lookup_row2.next();

							
							
								} // G 099
							
							

							if(fromLookup_row2 != null) {
								row2 = fromLookup_row2;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_1__Struct Var = Var__tMap_1;
Var.name = row2.nom;
Var.type = 2;
Var.trn = row2.matricule_fiscale.length() == 0 ? null : row2.matricule_fiscale ;
Var.customs = row2.code_douane.length() == 0 ? null : row2.code_douane ;
Var.address = row2.adresse.length() == 0 ? null : row2.adresse ;
Var.comment = row2.observation.length() == 0 ? null : row2.observation ;
Var.logo = row2.logo.length() == 0 ? null : row2.logo ;// ###############################
        // ###############################
        // # Output tables

output1 = null;


// # Output table : 'output1'
output1_tmp.id = row2.id ;
output1_tmp.name = Var.name ;
output1_tmp.trn = Var.trn ;
output1_tmp.customs = Var.customs ;
output1_tmp.address = Var.address ;
output1_tmp.comment = Var.comment ;
output1_tmp.logo = Var.logo ;
output1_tmp.type = Var.type ;
output1_tmp.created_at = row2.created_at ;
output1_tmp.updated_at = row2.updated_at ;
output1_tmp.deleted_at = row2.deleted_at ;
output1 = output1_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_1 = false;










 


	tos_count_tMap_1++;

/**
 * [tMap_1 main ] stop
 */
// Start of branch "output1"
if(output1 != null) { 



	
	/**
	 * [tMysqlOutput_1 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	

			//output1
			//output1


			
				if(execStat){
					runStat.updateStatOnConnection("output1"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_1 = false;
                            pstmt_tMysqlOutput_1.setLong(1, output1.id);

                            if(output1.name == null) {
pstmt_tMysqlOutput_1.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(2, output1.name);
}

                            if(output1.trn == null) {
pstmt_tMysqlOutput_1.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(3, output1.trn);
}

                            if(output1.customs == null) {
pstmt_tMysqlOutput_1.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(4, output1.customs);
}

                            if(output1.address == null) {
pstmt_tMysqlOutput_1.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(5, output1.address);
}

                            if(output1.comment == null) {
pstmt_tMysqlOutput_1.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(6, output1.comment);
}

                            if(output1.logo == null) {
pstmt_tMysqlOutput_1.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_1.setString(7, output1.logo);
}

                            if(output1.type == null) {
pstmt_tMysqlOutput_1.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_1.setInt(8, output1.type);
}

                            if(output1.created_at != null) {
date_tMysqlOutput_1 = output1.created_at.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmt_tMysqlOutput_1.setString(9, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_1.setTimestamp(9, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmt_tMysqlOutput_1.setNull(9, java.sql.Types.DATE);
}

                            if(output1.updated_at != null) {
date_tMysqlOutput_1 = output1.updated_at.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmt_tMysqlOutput_1.setString(10, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_1.setTimestamp(10, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmt_tMysqlOutput_1.setNull(10, java.sql.Types.DATE);
}

                            if(output1.deleted_at != null) {
date_tMysqlOutput_1 = output1.deleted_at.getTime();
if(date_tMysqlOutput_1 < year1_tMysqlOutput_1 || date_tMysqlOutput_1 >= year10000_tMysqlOutput_1) {
pstmt_tMysqlOutput_1.setString(11, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_1.setTimestamp(11, new java.sql.Timestamp(date_tMysqlOutput_1));
}
} else {
pstmt_tMysqlOutput_1.setNull(11, java.sql.Types.DATE);
}

                    pstmt_tMysqlOutput_1.addBatch();
                    nb_line_tMysqlOutput_1++;

                      batchSizeCounter_tMysqlOutput_1++;
                if ( batchSize_tMysqlOutput_1 <= batchSizeCounter_tMysqlOutput_1) {
                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_1 = 0;
            }
                commitCounter_tMysqlOutput_1++;

                if(commitEvery_tMysqlOutput_1 <= commitCounter_tMysqlOutput_1) {

                try {
                        int countSum_tMysqlOutput_1 = 0;
                        for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
                            countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_1 = 0;
                    for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
                    }
                    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_1.commit();
                    commitCounter_tMysqlOutput_1=0;

                }


 


	tos_count_tMysqlOutput_1++;

/**
 * [tMysqlOutput_1 main ] stop
 */

} // End of branch "output1"







	
	/**
	 * [tMysqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

	}
}finally{
	if(rs_tMysqlInput_1 !=null){
		rs_tMysqlInput_1.close();
	}
	stmt_tMysqlInput_1.close();
		if(conn_tMysqlInput_1 != null && !conn_tMysqlInput_1.isClosed()) {
			
			conn_tMysqlInput_1.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_1_NB_LINE",nb_line_tMysqlInput_1);
		


 

ok_Hash.put("tMysqlInput_1", true);
end_Hash.put("tMysqlInput_1", System.currentTimeMillis());




/**
 * [tMysqlInput_1 end ] stop
 */

	
	/**
	 * [tMap_1 end ] start
	 */

	

	
	
	currentComponent="tMap_1";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row2 != null) {
						tHash_Lookup_row2.endGet();
					}
					globalMap.remove( "tHash_Lookup_row2" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_1", true);
end_Hash.put("tMap_1", System.currentTimeMillis());




/**
 * [tMap_1 end ] stop
 */

	
	/**
	 * [tMysqlOutput_1 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_1 != 0) {
							int countSum_tMysqlOutput_1 = 0;
							
							for(int countEach_tMysqlOutput_1: pstmt_tMysqlOutput_1.executeBatch()) {
								countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_1 = 0;
					for(int countEach_tMysqlOutput_1: e.getUpdateCounts()) {
						countSum_tMysqlOutput_1 += (countEach_tMysqlOutput_1 < 0 ? 0 : countEach_tMysqlOutput_1);
					}
					
            	    insertedCount_tMysqlOutput_1 += countSum_tMysqlOutput_1;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_1 = 0;
    		
	

        if(pstmt_tMysqlOutput_1 != null) {
			
				pstmt_tMysqlOutput_1.close();
			
        }

    	if (commitCounter_tMysqlOutput_1 > 0) {
    		
    		conn_tMysqlOutput_1.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_1 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_1", true);
    	

	nb_line_deleted_tMysqlOutput_1=nb_line_deleted_tMysqlOutput_1+ deletedCount_tMysqlOutput_1;
	nb_line_update_tMysqlOutput_1=nb_line_update_tMysqlOutput_1 + updatedCount_tMysqlOutput_1;
	nb_line_inserted_tMysqlOutput_1=nb_line_inserted_tMysqlOutput_1 + insertedCount_tMysqlOutput_1;
	nb_line_rejected_tMysqlOutput_1=nb_line_rejected_tMysqlOutput_1 + rejectedCount_tMysqlOutput_1;
	
        globalMap.put("tMysqlOutput_1_NB_LINE",nb_line_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_1);
        globalMap.put("tMysqlOutput_1_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_1);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("output1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_1", true);
end_Hash.put("tMysqlOutput_1", System.currentTimeMillis());




/**
 * [tMysqlOutput_1 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_1"
					     			globalMap.remove("tHash_Lookup_row2"); 
				     			
				try{
					
	
	/**
	 * [tMysqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_1";

	

 



/**
 * [tMysqlInput_1 finally ] stop
 */

	
	/**
	 * [tMap_1 finally ] start
	 */

	

	
	
	currentComponent="tMap_1";

	

 



/**
 * [tMap_1 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_1 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_1";

	



	
		if(resourceMap.get("finish_tMysqlOutput_1")==null){
			if(resourceMap.get("conn_tMysqlOutput_1")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tMysqlOutput_1")).close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_1) {
					String errorMessage_tMysqlOutput_1 = "failed to close the connection in tMysqlOutput_1 :" + sqlEx_tMysqlOutput_1.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_1);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_1 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", 1);
	}
	


public static class row2Struct implements routines.system.IPersistableComparableLookupRow<row2Struct> {
    final static byte[] commonByteArrayLock_KYLOGGER_Company_Migration = new byte[0];
    static byte[] commonByteArray_KYLOGGER_Company_Migration = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String nom;

				public String getNom () {
					return this.nom;
				}
				
			    public String matricule_fiscale;

				public String getMatricule_fiscale () {
					return this.matricule_fiscale;
				}
				
			    public String code_douane;

				public String getCode_douane () {
					return this.code_douane;
				}
				
			    public String adresse;

				public String getAdresse () {
					return this.adresse;
				}
				
			    public String observation;

				public String getObservation () {
					return this.observation;
				}
				
			    public java.util.Date deleted_at;

				public java.util.Date getDeleted_at () {
					return this.deleted_at;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				
			    public String logo;

				public String getLogo () {
					return this.logo;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row2Struct other = (row2Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(row2Struct other) {

		other.id = this.id;
	            other.nom = this.nom;
	            other.matricule_fiscale = this.matricule_fiscale;
	            other.code_douane = this.code_douane;
	            other.adresse = this.adresse;
	            other.observation = this.observation;
	            other.deleted_at = this.deleted_at;
	            other.created_at = this.created_at;
	            other.updated_at = this.updated_at;
	            other.logo = this.logo;
	            
	}

	public void copyKeysDataTo(row2Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_KYLOGGER_Company_Migration) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nom = readString(dis,ois);
					
						this.matricule_fiscale = readString(dis,ois);
					
						this.code_douane = readString(dis,ois);
					
						this.adresse = readString(dis,ois);
					
						this.observation = readString(dis,ois);
					
						this.deleted_at = readDate(dis,ois);
					
						this.created_at = readDate(dis,ois);
					
						this.updated_at = readDate(dis,ois);
					
						this.logo = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nom, dos, oos);
					
						writeString(this.matricule_fiscale, dos, oos);
					
						writeString(this.code_douane, dos, oos);
					
						writeString(this.adresse, dos, oos);
					
						writeString(this.observation, dos, oos);
					
						writeDate(this.deleted_at, dos, oos);
					
						writeDate(this.created_at, dos, oos);
					
						writeDate(this.updated_at, dos, oos);
					
						writeString(this.logo, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",nom="+nom);
		sb.append(",matricule_fiscale="+matricule_fiscale);
		sb.append(",code_douane="+code_douane);
		sb.append(",adresse="+adresse);
		sb.append(",observation="+observation);
		sb.append(",deleted_at="+String.valueOf(deleted_at));
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
		sb.append(",logo="+logo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_2Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row2Struct row2 = new row2Struct();




	
	/**
	 * [tAdvancedHash_row2 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row2", false);
		start_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row2 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row2().limitLog4jByte();

			   		// connection name:row2
			   		// source node:tMysqlInput_2 - inputs:(after_tMysqlInput_1) outputs:(row2,row2) | target node:tAdvancedHash_row2 - inputs:(row2) outputs:()
			   		// linked node: tMap_1 - inputs:(row1,row2) outputs:(output1)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row2 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row2Struct> tHash_Lookup_row2 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row2Struct>getLookup(matchingModeEnum_row2);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row2", tHash_Lookup_row2);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row2 begin ] stop
 */



	
	/**
	 * [tMysqlInput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_2", false);
		start_Hash.put("tMysqlInput_2", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_2";

	
		int tos_count_tMysqlInput_2 = 0;
		
    	class BytesLimit65535_tMysqlInput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_2().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_2 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_2.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_2 = calendar_tMysqlInput_2.getTime();
		    int nb_line_tMysqlInput_2 = 0;
		    java.sql.Connection conn_tMysqlInput_2 = null;
				String driverClass_tMysqlInput_2 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_2);
			   	String dbUser_tMysqlInput_2 = "homestead";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_2 = routines.system.PasswordEncryptUtil.decryptPassword("abf4f1fe565f5343");
			   	
		        String dbPwd_tMysqlInput_2 = decryptedPassword_tMysqlInput_2;
		        
				
				String url_tMysqlInput_2 = "jdbc:mysql://" + "127.0.0.1" + ":" + "33060" + "/" + "kylogistique" + "?" + "noDatetimeStringSync=true&zeroDateTimeBehavior=convertToNull";
				
				conn_tMysqlInput_2 = java.sql.DriverManager.getConnection(url_tMysqlInput_2,dbUser_tMysqlInput_2,dbPwd_tMysqlInput_2);
		        
		    
			java.sql.Statement stmt_tMysqlInput_2 = conn_tMysqlInput_2.createStatement();

		    String dbquery_tMysqlInput_2 = "SELECT \n  `societes`.`id`, \n  `societes`.`nom`, \n  `societes`.`matricule_fiscale`, \n  `societes`.`code_douane`, \n  `societes`.`adresse`, \n  `societes`.`observation`, \n  `societes`.`deleted_at`, \n  `societes`.`created_at`, \n  `societes`.`updated_at`, \n  `societes`.`logo`\nFROM `societes`";
			

                       globalMap.put("tMysqlInput_2_QUERY",dbquery_tMysqlInput_2);

		    java.sql.ResultSet rs_tMysqlInput_2 = null;
		try{
		    rs_tMysqlInput_2 = stmt_tMysqlInput_2.executeQuery(dbquery_tMysqlInput_2);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_2 = rs_tMysqlInput_2.getMetaData();
		    int colQtyInRs_tMysqlInput_2 = rsmd_tMysqlInput_2.getColumnCount();

		    String tmpContent_tMysqlInput_2 = null;
		    
		    
		    while (rs_tMysqlInput_2.next()) {
		        nb_line_tMysqlInput_2++;
		        
							if(colQtyInRs_tMysqlInput_2 < 1) {
								row2.id = 0;
							} else {
		                          
            if(rs_tMysqlInput_2.getObject(1) != null) {
                row2.id = rs_tMysqlInput_2.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_2 < 2) {
								row2.nom = null;
							} else {
	                         		
        	row2.nom = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 3) {
								row2.matricule_fiscale = null;
							} else {
	                         		
        	row2.matricule_fiscale = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 3, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 4) {
								row2.code_douane = null;
							} else {
	                         		
        	row2.code_douane = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 4, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 5) {
								row2.adresse = null;
							} else {
	                         		
        	row2.adresse = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 5, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 6) {
								row2.observation = null;
							} else {
	                         		
        	row2.observation = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 6, false);
		                    }
							if(colQtyInRs_tMysqlInput_2 < 7) {
								row2.deleted_at = null;
							} else {
										
	        if(rs_tMysqlInput_2.getString(7) != null) {
	            String dateString_tMysqlInput_2 = rs_tMysqlInput_2.getString(7);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_2) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_2)) {
	                row2.deleted_at = rs_tMysqlInput_2.getTimestamp(7);
	            } else {
	                row2.deleted_at = (java.util.Date) year0_tMysqlInput_2.clone();
	            }
	        } else {
	            row2.deleted_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_2 < 8) {
								row2.created_at = null;
							} else {
										
	        if(rs_tMysqlInput_2.getString(8) != null) {
	            String dateString_tMysqlInput_2 = rs_tMysqlInput_2.getString(8);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_2) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_2)) {
	                row2.created_at = rs_tMysqlInput_2.getTimestamp(8);
	            } else {
	                row2.created_at = (java.util.Date) year0_tMysqlInput_2.clone();
	            }
	        } else {
	            row2.created_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_2 < 9) {
								row2.updated_at = null;
							} else {
										
	        if(rs_tMysqlInput_2.getString(9) != null) {
	            String dateString_tMysqlInput_2 = rs_tMysqlInput_2.getString(9);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_2) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_2)) {
	                row2.updated_at = rs_tMysqlInput_2.getTimestamp(9);
	            } else {
	                row2.updated_at = (java.util.Date) year0_tMysqlInput_2.clone();
	            }
	        } else {
	            row2.updated_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_2 < 10) {
								row2.logo = null;
							} else {
	                         		
        	row2.logo = routines.system.JDBCUtil.getString(rs_tMysqlInput_2, 10, false);
		                    }
					

 



/**
 * [tMysqlInput_2 begin ] stop
 */
	
	/**
	 * [tMysqlInput_2 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 


	tos_count_tMysqlInput_2++;

/**
 * [tMysqlInput_2 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		


			   
			   

					row2Struct row2_HashRow = new row2Struct();
		   	   	   
				
				row2_HashRow.id = row2.id;
				
				row2_HashRow.nom = row2.nom;
				
				row2_HashRow.matricule_fiscale = row2.matricule_fiscale;
				
				row2_HashRow.code_douane = row2.code_douane;
				
				row2_HashRow.adresse = row2.adresse;
				
				row2_HashRow.observation = row2.observation;
				
				row2_HashRow.deleted_at = row2.deleted_at;
				
				row2_HashRow.created_at = row2.created_at;
				
				row2_HashRow.updated_at = row2.updated_at;
				
				row2_HashRow.logo = row2.logo;
				
			tHash_Lookup_row2.put(row2_HashRow);
			
            




 


	tos_count_tAdvancedHash_row2++;

/**
 * [tAdvancedHash_row2 main ] stop
 */



	
	/**
	 * [tMysqlInput_2 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

	}
}finally{
	if(rs_tMysqlInput_2 !=null){
		rs_tMysqlInput_2.close();
	}
	stmt_tMysqlInput_2.close();
		if(conn_tMysqlInput_2 != null && !conn_tMysqlInput_2.isClosed()) {
			
			conn_tMysqlInput_2.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_2_NB_LINE",nb_line_tMysqlInput_2);
		


 

ok_Hash.put("tMysqlInput_2", true);
end_Hash.put("tMysqlInput_2", System.currentTimeMillis());




/**
 * [tMysqlInput_2 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

tHash_Lookup_row2.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row2", true);
end_Hash.put("tAdvancedHash_row2", System.currentTimeMillis());




/**
 * [tAdvancedHash_row2 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_2 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_2";

	

 



/**
 * [tMysqlInput_2 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row2 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row2";

	

 



/**
 * [tAdvancedHash_row2 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_2_SUBPROCESS_STATE", 1);
	}
	


public static class output2Struct implements routines.system.IPersistableRow<output2Struct> {
    final static byte[] commonByteArrayLock_KYLOGGER_Company_Migration = new byte[0];
    static byte[] commonByteArray_KYLOGGER_Company_Migration = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String name;

				public String getName () {
					return this.name;
				}
				
			    public String trn;

				public String getTrn () {
					return this.trn;
				}
				
			    public String customs;

				public String getCustoms () {
					return this.customs;
				}
				
			    public String address;

				public String getAddress () {
					return this.address;
				}
				
			    public String comment;

				public String getComment () {
					return this.comment;
				}
				
			    public String logo;

				public String getLogo () {
					return this.logo;
				}
				
			    public Integer type;

				public Integer getType () {
					return this.type;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				
			    public java.util.Date deleted_at;

				public java.util.Date getDeleted_at () {
					return this.deleted_at;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final output2Struct other = (output2Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(output2Struct other) {

		other.id = this.id;
	            other.name = this.name;
	            other.trn = this.trn;
	            other.customs = this.customs;
	            other.address = this.address;
	            other.comment = this.comment;
	            other.logo = this.logo;
	            other.type = this.type;
	            other.created_at = this.created_at;
	            other.updated_at = this.updated_at;
	            other.deleted_at = this.deleted_at;
	            
	}

	public void copyKeysDataTo(output2Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_KYLOGGER_Company_Migration.length) {
				if(length < 1024 && commonByteArray_KYLOGGER_Company_Migration.length == 0) {
   					commonByteArray_KYLOGGER_Company_Migration = new byte[1024];
				} else {
   					commonByteArray_KYLOGGER_Company_Migration = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_KYLOGGER_Company_Migration, 0, length);
			strReturn = new String(commonByteArray_KYLOGGER_Company_Migration, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }
	private Integer readInteger(ObjectInputStream dis) throws IOException{
		Integer intReturn;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			intReturn = null;
		} else {
	    	intReturn = dis.readInt();
		}
		return intReturn;
	}

	private void writeInteger(Integer intNum, ObjectOutputStream dos) throws IOException{
		if(intNum == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeInt(intNum);
    	}
	}

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_KYLOGGER_Company_Migration) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
					this.name = readString(dis);
					
					this.trn = readString(dis);
					
					this.customs = readString(dis);
					
					this.address = readString(dis);
					
					this.comment = readString(dis);
					
					this.logo = readString(dis);
					
						this.type = readInteger(dis);
					
					this.created_at = readDate(dis);
					
					this.updated_at = readDate(dis);
					
					this.deleted_at = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// String
				
						writeString(this.name,dos);
					
					// String
				
						writeString(this.trn,dos);
					
					// String
				
						writeString(this.customs,dos);
					
					// String
				
						writeString(this.address,dos);
					
					// String
				
						writeString(this.comment,dos);
					
					// String
				
						writeString(this.logo,dos);
					
					// Integer
				
						writeInteger(this.type,dos);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// java.util.Date
				
						writeDate(this.updated_at,dos);
					
					// java.util.Date
				
						writeDate(this.deleted_at,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",name="+name);
		sb.append(",trn="+trn);
		sb.append(",customs="+customs);
		sb.append(",address="+address);
		sb.append(",comment="+comment);
		sb.append(",logo="+logo);
		sb.append(",type="+String.valueOf(type));
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
		sb.append(",deleted_at="+String.valueOf(deleted_at));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(output2Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_KYLOGGER_Company_Migration = new byte[0];
    static byte[] commonByteArray_KYLOGGER_Company_Migration = new byte[0];

	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public Long societe_id;

				public Long getSociete_id () {
					return this.societe_id;
				}
				
			    public java.util.Date deleted_at;

				public java.util.Date getDeleted_at () {
					return this.deleted_at;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				



	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_KYLOGGER_Company_Migration) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.societe_id = null;
           				} else {
           			    	this.societe_id = dis.readLong();
           				}
					
					this.deleted_at = readDate(dis);
					
					this.created_at = readDate(dis);
					
					this.updated_at = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// Long
				
						if(this.societe_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.societe_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.deleted_at,dos);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// java.util.Date
				
						writeDate(this.updated_at,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",societe_id="+String.valueOf(societe_id));
		sb.append(",deleted_at="+String.valueOf(deleted_at));
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class after_tMysqlInput_3Struct implements routines.system.IPersistableRow<after_tMysqlInput_3Struct> {
    final static byte[] commonByteArrayLock_KYLOGGER_Company_Migration = new byte[0];
    static byte[] commonByteArray_KYLOGGER_Company_Migration = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public Long societe_id;

				public Long getSociete_id () {
					return this.societe_id;
				}
				
			    public java.util.Date deleted_at;

				public java.util.Date getDeleted_at () {
					return this.deleted_at;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final after_tMysqlInput_3Struct other = (after_tMysqlInput_3Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(after_tMysqlInput_3Struct other) {

		other.id = this.id;
	            other.societe_id = this.societe_id;
	            other.deleted_at = this.deleted_at;
	            other.created_at = this.created_at;
	            other.updated_at = this.updated_at;
	            
	}

	public void copyKeysDataTo(after_tMysqlInput_3Struct other) {

		other.id = this.id;
	            	
	}




	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_KYLOGGER_Company_Migration) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.societe_id = null;
           				} else {
           			    	this.societe_id = dis.readLong();
           				}
					
					this.deleted_at = readDate(dis);
					
					this.created_at = readDate(dis);
					
					this.updated_at = readDate(dis);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
					// Long
				
						if(this.societe_id == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.societe_id);
		            	}
					
					// java.util.Date
				
						writeDate(this.deleted_at,dos);
					
					// java.util.Date
				
						writeDate(this.created_at,dos);
					
					// java.util.Date
				
						writeDate(this.updated_at,dos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",societe_id="+String.valueOf(societe_id));
		sb.append(",deleted_at="+String.valueOf(deleted_at));
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(after_tMysqlInput_3Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_3Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;


		tMysqlInput_4Process(globalMap);

		row3Struct row3 = new row3Struct();
output2Struct output2 = new output2Struct();





	
	/**
	 * [tMysqlOutput_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlOutput_2", false);
		start_Hash.put("tMysqlOutput_2", System.currentTimeMillis());
		
	
	currentComponent="tMysqlOutput_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("output2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMysqlOutput_2 = 0;
		
    	class BytesLimit65535_tMysqlOutput_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlOutput_2().limitLog4jByte();






int nb_line_tMysqlOutput_2 = 0;
int nb_line_update_tMysqlOutput_2 = 0;
int nb_line_inserted_tMysqlOutput_2 = 0;
int nb_line_deleted_tMysqlOutput_2 = 0;
int nb_line_rejected_tMysqlOutput_2 = 0;

int deletedCount_tMysqlOutput_2=0;
int updatedCount_tMysqlOutput_2=0;
int insertedCount_tMysqlOutput_2=0;

int rejectedCount_tMysqlOutput_2=0;

String tableName_tMysqlOutput_2 = "companies";
boolean whetherReject_tMysqlOutput_2 = false;

java.util.Calendar calendar_tMysqlOutput_2 = java.util.Calendar.getInstance();
calendar_tMysqlOutput_2.set(1, 0, 1, 0, 0, 0);
long year1_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime().getTime();
calendar_tMysqlOutput_2.set(10000, 0, 1, 0, 0, 0);
long year10000_tMysqlOutput_2 = calendar_tMysqlOutput_2.getTime().getTime();
long date_tMysqlOutput_2;

java.sql.Connection conn_tMysqlOutput_2 = null;
		String dbProperties_tMysqlOutput_2 = "noDatetimeStringSync=true&zeroDateTimeBehavior=convertToNull";
		String url_tMysqlOutput_2 = null;
		if(dbProperties_tMysqlOutput_2 == null || dbProperties_tMysqlOutput_2.trim().length() == 0) {
			url_tMysqlOutput_2 = "jdbc:mysql://" + "127.0.0.1" + ":" + "33060" + "/" + "kylogger" + "?" + "rewriteBatchedStatements=true";
		} else {
			String properties_tMysqlOutput_2 = "noDatetimeStringSync=true&zeroDateTimeBehavior=convertToNull";
			if (!properties_tMysqlOutput_2.contains("rewriteBatchedStatements")) {
				properties_tMysqlOutput_2 += "&rewriteBatchedStatements=true";
			}

			url_tMysqlOutput_2 = "jdbc:mysql://" + "127.0.0.1" + ":" + "33060" + "/" + "kylogger" + "?" + properties_tMysqlOutput_2;
		}
		String driverClass_tMysqlOutput_2 = "org.gjt.mm.mysql.Driver";
		
		String dbUser_tMysqlOutput_2 = "homestead";
		

		 
	final String decryptedPassword_tMysqlOutput_2 = routines.system.PasswordEncryptUtil.decryptPassword("abf4f1fe565f5343");

		String dbPwd_tMysqlOutput_2 = decryptedPassword_tMysqlOutput_2;
		java.lang.Class.forName(driverClass_tMysqlOutput_2);
		
		conn_tMysqlOutput_2 = java.sql.DriverManager.getConnection(url_tMysqlOutput_2, dbUser_tMysqlOutput_2, dbPwd_tMysqlOutput_2);
		
	
	resourceMap.put("conn_tMysqlOutput_2", conn_tMysqlOutput_2);
        conn_tMysqlOutput_2.setAutoCommit(false);
        int commitEvery_tMysqlOutput_2 = 10000;
        int commitCounter_tMysqlOutput_2 = 0;

int count_tMysqlOutput_2=0;
    	

				String insert_tMysqlOutput_2 = "INSERT INTO `" + "companies" + "` (`id`,`name`,`trn`,`customs`,`address`,`comment`,`logo`,`type`,`created_at`,`updated_at`,`deleted_at`) VALUES (?,?,?,?,?,?,?,?,?,?,?)";
		        int batchSize_tMysqlOutput_2 = 100;
	   			int batchSizeCounter_tMysqlOutput_2=0;
		            
		        java.sql.PreparedStatement pstmt_tMysqlOutput_2 = conn_tMysqlOutput_2.prepareStatement(insert_tMysqlOutput_2);


 



/**
 * [tMysqlOutput_2 begin ] stop
 */



	
	/**
	 * [tMap_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tMap_2", false);
		start_Hash.put("tMap_2", System.currentTimeMillis());
		
	
	currentComponent="tMap_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMap_2 = 0;
		
    	class BytesLimit65535_tMap_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMap_2().limitLog4jByte();




// ###############################
// # Lookup's keys initialization
	
		org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 = (org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
				((org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct>) 
					globalMap.get( "tHash_Lookup_row4" ))
					;					
					
	

row4Struct row4HashKey = new row4Struct();
row4Struct row4Default = new row4Struct();
// ###############################        

// ###############################
// # Vars initialization
class  Var__tMap_2__Struct  {
	String name;
	Integer type;
	String trn;
	String customs;
	String address;
	String comment;
	String logo;
}
Var__tMap_2__Struct Var__tMap_2 = new Var__tMap_2__Struct();
// ###############################

// ###############################
// # Outputs initialization
output2Struct output2_tmp = new output2Struct();
// ###############################

        
        



        









 



/**
 * [tMap_2 begin ] stop
 */



	
	/**
	 * [tMysqlInput_3 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_3", false);
		start_Hash.put("tMysqlInput_3", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_3";

	
		int tos_count_tMysqlInput_3 = 0;
		
    	class BytesLimit65535_tMysqlInput_3{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_3().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_3 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_3.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_3 = calendar_tMysqlInput_3.getTime();
		    int nb_line_tMysqlInput_3 = 0;
		    java.sql.Connection conn_tMysqlInput_3 = null;
				String driverClass_tMysqlInput_3 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_3);
			   	String dbUser_tMysqlInput_3 = "homestead";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_3 = routines.system.PasswordEncryptUtil.decryptPassword("abf4f1fe565f5343");
			   	
		        String dbPwd_tMysqlInput_3 = decryptedPassword_tMysqlInput_3;
		        
				
				String url_tMysqlInput_3 = "jdbc:mysql://" + "127.0.0.1" + ":" + "33060" + "/" + "kylogistique" + "?" + "noDatetimeStringSync=true&zeroDateTimeBehavior=convertToNull";
				
				conn_tMysqlInput_3 = java.sql.DriverManager.getConnection(url_tMysqlInput_3,dbUser_tMysqlInput_3,dbPwd_tMysqlInput_3);
		        
		    
			java.sql.Statement stmt_tMysqlInput_3 = conn_tMysqlInput_3.createStatement();

		    String dbquery_tMysqlInput_3 = "SELECT \n  `fournisseurs`.`id`, \n  `fournisseurs`.`societe_id`, \n  `fournisseurs`.`deleted_at`, \n  `fournisseurs`.`created_at`, \n  `fournisseurs`.`updated_at`\nFROM `fournisseurs`";
			

                       globalMap.put("tMysqlInput_3_QUERY",dbquery_tMysqlInput_3);

		    java.sql.ResultSet rs_tMysqlInput_3 = null;
		try{
		    rs_tMysqlInput_3 = stmt_tMysqlInput_3.executeQuery(dbquery_tMysqlInput_3);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_3 = rs_tMysqlInput_3.getMetaData();
		    int colQtyInRs_tMysqlInput_3 = rsmd_tMysqlInput_3.getColumnCount();

		    String tmpContent_tMysqlInput_3 = null;
		    
		    
		    while (rs_tMysqlInput_3.next()) {
		        nb_line_tMysqlInput_3++;
		        
							if(colQtyInRs_tMysqlInput_3 < 1) {
								row3.id = 0;
							} else {
		                          
            if(rs_tMysqlInput_3.getObject(1) != null) {
                row3.id = rs_tMysqlInput_3.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 2) {
								row3.societe_id = null;
							} else {
		                          
            if(rs_tMysqlInput_3.getObject(2) != null) {
                row3.societe_id = rs_tMysqlInput_3.getLong(2);
            } else {
                    row3.societe_id = null;
            }
		                    }
							if(colQtyInRs_tMysqlInput_3 < 3) {
								row3.deleted_at = null;
							} else {
										
	        if(rs_tMysqlInput_3.getString(3) != null) {
	            String dateString_tMysqlInput_3 = rs_tMysqlInput_3.getString(3);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_3) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_3)) {
	                row3.deleted_at = rs_tMysqlInput_3.getTimestamp(3);
	            } else {
	                row3.deleted_at = (java.util.Date) year0_tMysqlInput_3.clone();
	            }
	        } else {
	            row3.deleted_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_3 < 4) {
								row3.created_at = null;
							} else {
										
	        if(rs_tMysqlInput_3.getString(4) != null) {
	            String dateString_tMysqlInput_3 = rs_tMysqlInput_3.getString(4);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_3) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_3)) {
	                row3.created_at = rs_tMysqlInput_3.getTimestamp(4);
	            } else {
	                row3.created_at = (java.util.Date) year0_tMysqlInput_3.clone();
	            }
	        } else {
	            row3.created_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_3 < 5) {
								row3.updated_at = null;
							} else {
										
	        if(rs_tMysqlInput_3.getString(5) != null) {
	            String dateString_tMysqlInput_3 = rs_tMysqlInput_3.getString(5);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_3) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_3)) {
	                row3.updated_at = rs_tMysqlInput_3.getTimestamp(5);
	            } else {
	                row3.updated_at = (java.util.Date) year0_tMysqlInput_3.clone();
	            }
	        } else {
	            row3.updated_at =  null;
	        }			 
		                    }
					

 



/**
 * [tMysqlInput_3 begin ] stop
 */
	
	/**
	 * [tMysqlInput_3 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 


	tos_count_tMysqlInput_3++;

/**
 * [tMysqlInput_3 main ] stop
 */

	
	/**
	 * [tMap_2 main ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

		
		
		boolean hasCasePrimitiveKeyWithNull_tMap_2 = false;
		
        // ###############################
        // # Input tables (lookups)
		  boolean rejectedInnerJoin_tMap_2 = false;
		  boolean mainRowRejected_tMap_2 = false;
            				    								  
		

				///////////////////////////////////////////////
				// Starting Lookup Table "row4" 
				///////////////////////////////////////////////


				
				
                            
 					    boolean forceLooprow4 = false;
       		  	    	
       		  	    	
 							row4Struct row4ObjectFromLookup = null;
                          
		           		  	if(!rejectedInnerJoin_tMap_2) { // G_TM_M_020

								
								hasCasePrimitiveKeyWithNull_tMap_2 = false;
								
	                        		    	Object exprKeyValue_row4__id = row3.societe_id;
	                        		    	if(exprKeyValue_row4__id == null) {
	                        		    		hasCasePrimitiveKeyWithNull_tMap_2 = true;
	                        		    	} else {
                        		    			row4HashKey.id = (long)(Long) exprKeyValue_row4__id;
                        		    		}
                        		    		

								
		                        	row4HashKey.hashCodeDirty = true;
                        		
	  					
	  							
	
		  							if(!hasCasePrimitiveKeyWithNull_tMap_2) { // G_TM_M_091
		  							
			  					
			  					
			  					
	  					
		  							tHash_Lookup_row4.lookup( row4HashKey );

	  							

	  							

			  						} // G_TM_M_091
			  						
			  					

 								
		  				
	  								
						
									
  									  		
 								



							} // G_TM_M_020
			           		  	  
							
				           		if(tHash_Lookup_row4 != null && tHash_Lookup_row4.getCount(row4HashKey) > 1) { // G 071
			  							
			  						
									 		
									//System.out.println("WARNING: UNIQUE MATCH is configured for the lookup 'row4' and it contains more one result from keys :  row4.id = '" + row4HashKey.id + "'");
								} // G 071
							

							row4Struct row4 = null;
                    		  	 
							   
                    		  	 
	       		  	    	row4Struct fromLookup_row4 = null;
							row4 = row4Default;
										 
							
								 
							
							
								if (tHash_Lookup_row4 !=null && tHash_Lookup_row4.hasNext()) { // G 099
								
							
								
								fromLookup_row4 = tHash_Lookup_row4.next();

							
							
								} // G 099
							
							

							if(fromLookup_row4 != null) {
								row4 = fromLookup_row4;
							}
							
							
							
			  							
								
	                    		  	
		                    
	            	
	            	
	            // ###############################
        { // start of Var scope
        
	        // ###############################
        	// # Vars tables
        
Var__tMap_2__Struct Var = Var__tMap_2;
Var.name = row4.nom;
Var.type = 1;
Var.trn = row4.matricule_fiscale.length() == 0 ? null : row4.matricule_fiscale ;
Var.customs = row4.code_douane.length() == 0 ? null : row4.code_douane ;
Var.address = row4.adresse.length() == 0 ? null : row4.adresse ;
Var.comment = row4.observation.length() == 0 ? null : row4.observation ;
Var.logo = row4.logo.length() == 0 ? null : row4.logo ;// ###############################
        // ###############################
        // # Output tables

output2 = null;


// # Output table : 'output2'
output2_tmp.id = row4.id ;
output2_tmp.name = Var.name ;
output2_tmp.trn = Var.trn ;
output2_tmp.customs = Var.customs ;
output2_tmp.address = Var.address ;
output2_tmp.comment = Var.comment ;
output2_tmp.logo = Var.logo ;
output2_tmp.type = Var.type ;
output2_tmp.created_at = row4.created_at ;
output2_tmp.updated_at = row4.updated_at ;
output2_tmp.deleted_at = row4.deleted_at ;
output2 = output2_tmp;
// ###############################

} // end of Var scope

rejectedInnerJoin_tMap_2 = false;










 


	tos_count_tMap_2++;

/**
 * [tMap_2 main ] stop
 */
// Start of branch "output2"
if(output2 != null) { 



	
	/**
	 * [tMysqlOutput_2 main ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	

			//output2
			//output2


			
				if(execStat){
					runStat.updateStatOnConnection("output2"+iterateId,1, 1);
				} 
			

		



        whetherReject_tMysqlOutput_2 = false;
                            pstmt_tMysqlOutput_2.setLong(1, output2.id);

                            if(output2.name == null) {
pstmt_tMysqlOutput_2.setNull(2, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(2, output2.name);
}

                            if(output2.trn == null) {
pstmt_tMysqlOutput_2.setNull(3, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(3, output2.trn);
}

                            if(output2.customs == null) {
pstmt_tMysqlOutput_2.setNull(4, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(4, output2.customs);
}

                            if(output2.address == null) {
pstmt_tMysqlOutput_2.setNull(5, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(5, output2.address);
}

                            if(output2.comment == null) {
pstmt_tMysqlOutput_2.setNull(6, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(6, output2.comment);
}

                            if(output2.logo == null) {
pstmt_tMysqlOutput_2.setNull(7, java.sql.Types.VARCHAR);
} else {pstmt_tMysqlOutput_2.setString(7, output2.logo);
}

                            if(output2.type == null) {
pstmt_tMysqlOutput_2.setNull(8, java.sql.Types.INTEGER);
} else {pstmt_tMysqlOutput_2.setInt(8, output2.type);
}

                            if(output2.created_at != null) {
date_tMysqlOutput_2 = output2.created_at.getTime();
if(date_tMysqlOutput_2 < year1_tMysqlOutput_2 || date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
pstmt_tMysqlOutput_2.setString(9, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_2.setTimestamp(9, new java.sql.Timestamp(date_tMysqlOutput_2));
}
} else {
pstmt_tMysqlOutput_2.setNull(9, java.sql.Types.DATE);
}

                            if(output2.updated_at != null) {
date_tMysqlOutput_2 = output2.updated_at.getTime();
if(date_tMysqlOutput_2 < year1_tMysqlOutput_2 || date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
pstmt_tMysqlOutput_2.setString(10, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_2.setTimestamp(10, new java.sql.Timestamp(date_tMysqlOutput_2));
}
} else {
pstmt_tMysqlOutput_2.setNull(10, java.sql.Types.DATE);
}

                            if(output2.deleted_at != null) {
date_tMysqlOutput_2 = output2.deleted_at.getTime();
if(date_tMysqlOutput_2 < year1_tMysqlOutput_2 || date_tMysqlOutput_2 >= year10000_tMysqlOutput_2) {
pstmt_tMysqlOutput_2.setString(11, "0000-00-00 00:00:00");
} else {pstmt_tMysqlOutput_2.setTimestamp(11, new java.sql.Timestamp(date_tMysqlOutput_2));
}
} else {
pstmt_tMysqlOutput_2.setNull(11, java.sql.Types.DATE);
}

                    pstmt_tMysqlOutput_2.addBatch();
                    nb_line_tMysqlOutput_2++;

                      batchSizeCounter_tMysqlOutput_2++;
                if ( batchSize_tMysqlOutput_2 <= batchSizeCounter_tMysqlOutput_2) {
                try {
                        int countSum_tMysqlOutput_2 = 0;
                        for(int countEach_tMysqlOutput_2: pstmt_tMysqlOutput_2.executeBatch()) {
                            countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_2 = 0;
                    for(int countEach_tMysqlOutput_2: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
                    }
                    insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                    System.err.println(e.getMessage());
                }

                batchSizeCounter_tMysqlOutput_2 = 0;
            }
                commitCounter_tMysqlOutput_2++;

                if(commitEvery_tMysqlOutput_2 <= commitCounter_tMysqlOutput_2) {

                try {
                        int countSum_tMysqlOutput_2 = 0;
                        for(int countEach_tMysqlOutput_2: pstmt_tMysqlOutput_2.executeBatch()) {
                            countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : 1);
                        }
                        insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                }catch (java.sql.BatchUpdateException e){
                    int countSum_tMysqlOutput_2 = 0;
                    for(int countEach_tMysqlOutput_2: e.getUpdateCounts()) {
                        countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
                    }
                    insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
                    System.err.println(e.getMessage());

                }
                    conn_tMysqlOutput_2.commit();
                    commitCounter_tMysqlOutput_2=0;

                }


 


	tos_count_tMysqlOutput_2++;

/**
 * [tMysqlOutput_2 main ] stop
 */

} // End of branch "output2"







	
	/**
	 * [tMysqlInput_3 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

	}
}finally{
	if(rs_tMysqlInput_3 !=null){
		rs_tMysqlInput_3.close();
	}
	stmt_tMysqlInput_3.close();
		if(conn_tMysqlInput_3 != null && !conn_tMysqlInput_3.isClosed()) {
			
			conn_tMysqlInput_3.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_3_NB_LINE",nb_line_tMysqlInput_3);
		


 

ok_Hash.put("tMysqlInput_3", true);
end_Hash.put("tMysqlInput_3", System.currentTimeMillis());




/**
 * [tMysqlInput_3 end ] stop
 */

	
	/**
	 * [tMap_2 end ] start
	 */

	

	
	
	currentComponent="tMap_2";

	


// ###############################
// # Lookup hashes releasing
					if(tHash_Lookup_row4 != null) {
						tHash_Lookup_row4.endGet();
					}
					globalMap.remove( "tHash_Lookup_row4" );

					
					
				
// ###############################      





			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMap_2", true);
end_Hash.put("tMap_2", System.currentTimeMillis());




/**
 * [tMap_2 end ] stop
 */

	
	/**
	 * [tMysqlOutput_2 end ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	



                try {
                		if (batchSizeCounter_tMysqlOutput_2 != 0) {
							int countSum_tMysqlOutput_2 = 0;
							
							for(int countEach_tMysqlOutput_2: pstmt_tMysqlOutput_2.executeBatch()) {
								countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : 1);
							}
							
	            	    	
	            	    		insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
	            	    	
            	    	}

                }catch (java.sql.BatchUpdateException e){
                	
                	int countSum_tMysqlOutput_2 = 0;
					for(int countEach_tMysqlOutput_2: e.getUpdateCounts()) {
						countSum_tMysqlOutput_2 += (countEach_tMysqlOutput_2 < 0 ? 0 : countEach_tMysqlOutput_2);
					}
					
            	    insertedCount_tMysqlOutput_2 += countSum_tMysqlOutput_2;
	    	    	
					globalMap.put(currentComponent+"_ERROR_MESSAGE",e.getMessage());
                	System.err.println(e.getMessage());
                	
                }
                batchSizeCounter_tMysqlOutput_2 = 0;
    		
	

        if(pstmt_tMysqlOutput_2 != null) {
			
				pstmt_tMysqlOutput_2.close();
			
        }

    	if (commitCounter_tMysqlOutput_2 > 0) {
    		
    		conn_tMysqlOutput_2.commit();
    		
    	}
    		
		
    	conn_tMysqlOutput_2 .close();
    	
    	resourceMap.put("finish_tMysqlOutput_2", true);
    	

	nb_line_deleted_tMysqlOutput_2=nb_line_deleted_tMysqlOutput_2+ deletedCount_tMysqlOutput_2;
	nb_line_update_tMysqlOutput_2=nb_line_update_tMysqlOutput_2 + updatedCount_tMysqlOutput_2;
	nb_line_inserted_tMysqlOutput_2=nb_line_inserted_tMysqlOutput_2 + insertedCount_tMysqlOutput_2;
	nb_line_rejected_tMysqlOutput_2=nb_line_rejected_tMysqlOutput_2 + rejectedCount_tMysqlOutput_2;
	
        globalMap.put("tMysqlOutput_2_NB_LINE",nb_line_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_UPDATED",nb_line_update_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_INSERTED",nb_line_inserted_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_DELETED",nb_line_deleted_tMysqlOutput_2);
        globalMap.put("tMysqlOutput_2_NB_LINE_REJECTED", nb_line_rejected_tMysqlOutput_2);
    
	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("output2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMysqlOutput_2", true);
end_Hash.put("tMysqlOutput_2", System.currentTimeMillis());




/**
 * [tMysqlOutput_2 end ] stop
 */






				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
					     			//free memory for "tMap_2"
					     			globalMap.remove("tHash_Lookup_row4"); 
				     			
				try{
					
	
	/**
	 * [tMysqlInput_3 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_3";

	

 



/**
 * [tMysqlInput_3 finally ] stop
 */

	
	/**
	 * [tMap_2 finally ] start
	 */

	

	
	
	currentComponent="tMap_2";

	

 



/**
 * [tMap_2 finally ] stop
 */

	
	/**
	 * [tMysqlOutput_2 finally ] start
	 */

	

	
	
	currentComponent="tMysqlOutput_2";

	



	
		if(resourceMap.get("finish_tMysqlOutput_2")==null){
			if(resourceMap.get("conn_tMysqlOutput_2")!=null){
				try {
					
					((java.sql.Connection)resourceMap.get("conn_tMysqlOutput_2")).close();
					
				} catch (java.sql.SQLException sqlEx_tMysqlOutput_2) {
					String errorMessage_tMysqlOutput_2 = "failed to close the connection in tMysqlOutput_2 :" + sqlEx_tMysqlOutput_2.getMessage();
					
					System.err.println(errorMessage_tMysqlOutput_2);
				}
			}
		}
	

 



/**
 * [tMysqlOutput_2 finally ] stop
 */






				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableComparableLookupRow<row4Struct> {
    final static byte[] commonByteArrayLock_KYLOGGER_Company_Migration = new byte[0];
    static byte[] commonByteArray_KYLOGGER_Company_Migration = new byte[0];
	protected static final int DEFAULT_HASHCODE = 1;
    protected static final int PRIME = 31;
    protected int hashCode = DEFAULT_HASHCODE;
    public boolean hashCodeDirty = true;

    public String loopKey;



	
			    public long id;

				public long getId () {
					return this.id;
				}
				
			    public String nom;

				public String getNom () {
					return this.nom;
				}
				
			    public String matricule_fiscale;

				public String getMatricule_fiscale () {
					return this.matricule_fiscale;
				}
				
			    public String code_douane;

				public String getCode_douane () {
					return this.code_douane;
				}
				
			    public String adresse;

				public String getAdresse () {
					return this.adresse;
				}
				
			    public String observation;

				public String getObservation () {
					return this.observation;
				}
				
			    public java.util.Date deleted_at;

				public java.util.Date getDeleted_at () {
					return this.deleted_at;
				}
				
			    public java.util.Date created_at;

				public java.util.Date getCreated_at () {
					return this.created_at;
				}
				
			    public java.util.Date updated_at;

				public java.util.Date getUpdated_at () {
					return this.updated_at;
				}
				
			    public String logo;

				public String getLogo () {
					return this.logo;
				}
				


	@Override
	public int hashCode() {
		if (this.hashCodeDirty) {
			final int prime = PRIME;
			int result = DEFAULT_HASHCODE;
	
							result = prime * result + (int) this.id;
						
    		this.hashCode = result;
    		this.hashCodeDirty = false;
		}
		return this.hashCode;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) return true;
		if (obj == null) return false;
		if (getClass() != obj.getClass()) return false;
		final row4Struct other = (row4Struct) obj;
		
						if (this.id != other.id)
							return false;
					

		return true;
    }

	public void copyDataTo(row4Struct other) {

		other.id = this.id;
	            other.nom = this.nom;
	            other.matricule_fiscale = this.matricule_fiscale;
	            other.code_douane = this.code_douane;
	            other.adresse = this.adresse;
	            other.observation = this.observation;
	            other.deleted_at = this.deleted_at;
	            other.created_at = this.created_at;
	            other.updated_at = this.updated_at;
	            other.logo = this.logo;
	            
	}

	public void copyKeysDataTo(row4Struct other) {

		other.id = this.id;
	            	
	}




	private String readString(DataInputStream dis, ObjectInputStream ois) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			byte[] byteArray = new byte[length];
			dis.read(byteArray);
			strReturn = new String(byteArray, utf8Charset);
		}
		return strReturn;
	}

	private void writeString(String str, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
	}

	private java.util.Date readDate(DataInputStream dis, ObjectInputStream ois) throws IOException{
		java.util.Date dateReturn = null;
		int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

	private void writeDate(java.util.Date date1, DataOutputStream dos, ObjectOutputStream oos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
	}

    public void readKeysData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_KYLOGGER_Company_Migration) {

        	try {

        		int length = 0;
		
			        this.id = dis.readLong();
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeKeysData(ObjectOutputStream dos) {
        try {

		
					// long
				
		            	dos.writeLong(this.id);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }



    /**
     * Fill Values data by reading ObjectInputStream.
     */
    public void readValuesData(DataInputStream dis, ObjectInputStream ois) {
        try {

			int length = 0;
		
						this.nom = readString(dis,ois);
					
						this.matricule_fiscale = readString(dis,ois);
					
						this.code_douane = readString(dis,ois);
					
						this.adresse = readString(dis,ois);
					
						this.observation = readString(dis,ois);
					
						this.deleted_at = readDate(dis,ois);
					
						this.created_at = readDate(dis,ois);
					
						this.updated_at = readDate(dis,ois);
					
						this.logo = readString(dis,ois);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

    }

    /**
     * Return a byte array which represents Values data.
     */
    public void writeValuesData(DataOutputStream dos, ObjectOutputStream oos) {
        try {

		
						writeString(this.nom, dos, oos);
					
						writeString(this.matricule_fiscale, dos, oos);
					
						writeString(this.code_douane, dos, oos);
					
						writeString(this.adresse, dos, oos);
					
						writeString(this.observation, dos, oos);
					
						writeDate(this.deleted_at, dos, oos);
					
						writeDate(this.created_at, dos, oos);
					
						writeDate(this.updated_at, dos, oos);
					
						writeString(this.logo, dos, oos);
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        	}

    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("id="+String.valueOf(id));
		sb.append(",nom="+nom);
		sb.append(",matricule_fiscale="+matricule_fiscale);
		sb.append(",code_douane="+code_douane);
		sb.append(",adresse="+adresse);
		sb.append(",observation="+observation);
		sb.append(",deleted_at="+String.valueOf(deleted_at));
		sb.append(",created_at="+String.valueOf(created_at));
		sb.append(",updated_at="+String.valueOf(updated_at));
		sb.append(",logo="+logo);
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
						returnValue = checkNullsAndCompare(this.id, other.id);
						if(returnValue != 0) {
							return returnValue;
						}

					
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMysqlInput_4Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row4Struct row4 = new row4Struct();




	
	/**
	 * [tAdvancedHash_row4 begin ] start
	 */

	

	
		
		ok_Hash.put("tAdvancedHash_row4", false);
		start_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());
		
	
	currentComponent="tAdvancedHash_row4";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tAdvancedHash_row4 = 0;
		
    	class BytesLimit65535_tAdvancedHash_row4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tAdvancedHash_row4().limitLog4jByte();

			   		// connection name:row4
			   		// source node:tMysqlInput_4 - inputs:(after_tMysqlInput_3) outputs:(row4,row4) | target node:tAdvancedHash_row4 - inputs:(row4) outputs:()
			   		// linked node: tMap_2 - inputs:(row3,row4) outputs:(output2)
			   
			   		org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE matchingModeEnum_row4 = 
			   			org.talend.designer.components.lookup.common.ICommonLookup.MATCHING_MODE.UNIQUE_MATCH;
			   			
			   
	   			org.talend.designer.components.lookup.memory.AdvancedMemoryLookup<row4Struct> tHash_Lookup_row4 =org.talend.designer.components.lookup.memory.AdvancedMemoryLookup.
	   						<row4Struct>getLookup(matchingModeEnum_row4);
	   						   
		   	   	   globalMap.put("tHash_Lookup_row4", tHash_Lookup_row4);
		   	   	   
				
           

 



/**
 * [tAdvancedHash_row4 begin ] stop
 */



	
	/**
	 * [tMysqlInput_4 begin ] start
	 */

	

	
		
		ok_Hash.put("tMysqlInput_4", false);
		start_Hash.put("tMysqlInput_4", System.currentTimeMillis());
		
	
	currentComponent="tMysqlInput_4";

	
		int tos_count_tMysqlInput_4 = 0;
		
    	class BytesLimit65535_tMysqlInput_4{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMysqlInput_4().limitLog4jByte();
	
	
		    java.util.Calendar calendar_tMysqlInput_4 = java.util.Calendar.getInstance();
		    calendar_tMysqlInput_4.set(0, 0, 0, 0, 0, 0);
		    java.util.Date year0_tMysqlInput_4 = calendar_tMysqlInput_4.getTime();
		    int nb_line_tMysqlInput_4 = 0;
		    java.sql.Connection conn_tMysqlInput_4 = null;
				String driverClass_tMysqlInput_4 = "org.gjt.mm.mysql.Driver";
			    java.lang.Class.forName(driverClass_tMysqlInput_4);
			   	String dbUser_tMysqlInput_4 = "homestead";
			   	
        		
        		
        		 
	final String decryptedPassword_tMysqlInput_4 = routines.system.PasswordEncryptUtil.decryptPassword("abf4f1fe565f5343");
			   	
		        String dbPwd_tMysqlInput_4 = decryptedPassword_tMysqlInput_4;
		        
				
				String url_tMysqlInput_4 = "jdbc:mysql://" + "127.0.0.1" + ":" + "33060" + "/" + "kylogistique" + "?" + "noDatetimeStringSync=true&zeroDateTimeBehavior=convertToNull";
				
				conn_tMysqlInput_4 = java.sql.DriverManager.getConnection(url_tMysqlInput_4,dbUser_tMysqlInput_4,dbPwd_tMysqlInput_4);
		        
		    
			java.sql.Statement stmt_tMysqlInput_4 = conn_tMysqlInput_4.createStatement();

		    String dbquery_tMysqlInput_4 = "SELECT \n  `societes`.`id`, \n  `societes`.`nom`, \n  `societes`.`matricule_fiscale`, \n  `societes`.`code_douane`, \n  `societes`.`adresse`, \n  `societes`.`observation`, \n  `societes`.`deleted_at`, \n  `societes`.`created_at`, \n  `societes`.`updated_at`, \n  `societes`.`logo`\nFROM `societes`";
			

                       globalMap.put("tMysqlInput_4_QUERY",dbquery_tMysqlInput_4);

		    java.sql.ResultSet rs_tMysqlInput_4 = null;
		try{
		    rs_tMysqlInput_4 = stmt_tMysqlInput_4.executeQuery(dbquery_tMysqlInput_4);
		    java.sql.ResultSetMetaData rsmd_tMysqlInput_4 = rs_tMysqlInput_4.getMetaData();
		    int colQtyInRs_tMysqlInput_4 = rsmd_tMysqlInput_4.getColumnCount();

		    String tmpContent_tMysqlInput_4 = null;
		    
		    
		    while (rs_tMysqlInput_4.next()) {
		        nb_line_tMysqlInput_4++;
		        
							if(colQtyInRs_tMysqlInput_4 < 1) {
								row4.id = 0;
							} else {
		                          
            if(rs_tMysqlInput_4.getObject(1) != null) {
                row4.id = rs_tMysqlInput_4.getLong(1);
            } else {
                    throw new RuntimeException("Null value in non-Nullable column");
            }
		                    }
							if(colQtyInRs_tMysqlInput_4 < 2) {
								row4.nom = null;
							} else {
	                         		
        	row4.nom = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 2, false);
		                    }
							if(colQtyInRs_tMysqlInput_4 < 3) {
								row4.matricule_fiscale = null;
							} else {
	                         		
        	row4.matricule_fiscale = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 3, false);
		                    }
							if(colQtyInRs_tMysqlInput_4 < 4) {
								row4.code_douane = null;
							} else {
	                         		
        	row4.code_douane = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 4, false);
		                    }
							if(colQtyInRs_tMysqlInput_4 < 5) {
								row4.adresse = null;
							} else {
	                         		
        	row4.adresse = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 5, false);
		                    }
							if(colQtyInRs_tMysqlInput_4 < 6) {
								row4.observation = null;
							} else {
	                         		
        	row4.observation = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 6, false);
		                    }
							if(colQtyInRs_tMysqlInput_4 < 7) {
								row4.deleted_at = null;
							} else {
										
	        if(rs_tMysqlInput_4.getString(7) != null) {
	            String dateString_tMysqlInput_4 = rs_tMysqlInput_4.getString(7);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_4) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_4)) {
	                row4.deleted_at = rs_tMysqlInput_4.getTimestamp(7);
	            } else {
	                row4.deleted_at = (java.util.Date) year0_tMysqlInput_4.clone();
	            }
	        } else {
	            row4.deleted_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_4 < 8) {
								row4.created_at = null;
							} else {
										
	        if(rs_tMysqlInput_4.getString(8) != null) {
	            String dateString_tMysqlInput_4 = rs_tMysqlInput_4.getString(8);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_4) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_4)) {
	                row4.created_at = rs_tMysqlInput_4.getTimestamp(8);
	            } else {
	                row4.created_at = (java.util.Date) year0_tMysqlInput_4.clone();
	            }
	        } else {
	            row4.created_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_4 < 9) {
								row4.updated_at = null;
							} else {
										
	        if(rs_tMysqlInput_4.getString(9) != null) {
	            String dateString_tMysqlInput_4 = rs_tMysqlInput_4.getString(9);
	            if (!("0000-00-00").equals(dateString_tMysqlInput_4) && !("0000-00-00 00:00:00").equals(dateString_tMysqlInput_4)) {
	                row4.updated_at = rs_tMysqlInput_4.getTimestamp(9);
	            } else {
	                row4.updated_at = (java.util.Date) year0_tMysqlInput_4.clone();
	            }
	        } else {
	            row4.updated_at =  null;
	        }			 
		                    }
							if(colQtyInRs_tMysqlInput_4 < 10) {
								row4.logo = null;
							} else {
	                         		
        	row4.logo = routines.system.JDBCUtil.getString(rs_tMysqlInput_4, 10, false);
		                    }
					

 



/**
 * [tMysqlInput_4 begin ] stop
 */
	
	/**
	 * [tMysqlInput_4 main ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 


	tos_count_tMysqlInput_4++;

/**
 * [tMysqlInput_4 main ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 main ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		


			   
			   

					row4Struct row4_HashRow = new row4Struct();
		   	   	   
				
				row4_HashRow.id = row4.id;
				
				row4_HashRow.nom = row4.nom;
				
				row4_HashRow.matricule_fiscale = row4.matricule_fiscale;
				
				row4_HashRow.code_douane = row4.code_douane;
				
				row4_HashRow.adresse = row4.adresse;
				
				row4_HashRow.observation = row4.observation;
				
				row4_HashRow.deleted_at = row4.deleted_at;
				
				row4_HashRow.created_at = row4.created_at;
				
				row4_HashRow.updated_at = row4.updated_at;
				
				row4_HashRow.logo = row4.logo;
				
			tHash_Lookup_row4.put(row4_HashRow);
			
            




 


	tos_count_tAdvancedHash_row4++;

/**
 * [tAdvancedHash_row4 main ] stop
 */



	
	/**
	 * [tMysqlInput_4 end ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

	}
}finally{
	if(rs_tMysqlInput_4 !=null){
		rs_tMysqlInput_4.close();
	}
	stmt_tMysqlInput_4.close();
		if(conn_tMysqlInput_4 != null && !conn_tMysqlInput_4.isClosed()) {
			
			conn_tMysqlInput_4.close();
			
		}
		
}

		   globalMap.put("tMysqlInput_4_NB_LINE",nb_line_tMysqlInput_4);
		


 

ok_Hash.put("tMysqlInput_4", true);
end_Hash.put("tMysqlInput_4", System.currentTimeMillis());




/**
 * [tMysqlInput_4 end ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 end ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

tHash_Lookup_row4.endPut();

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tAdvancedHash_row4", true);
end_Hash.put("tAdvancedHash_row4", System.currentTimeMillis());




/**
 * [tAdvancedHash_row4 end ] stop
 */



				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMysqlInput_4 finally ] start
	 */

	

	
	
	currentComponent="tMysqlInput_4";

	

 



/**
 * [tMysqlInput_4 finally ] stop
 */

	
	/**
	 * [tAdvancedHash_row4 finally ] start
	 */

	

	
	
	currentComponent="tAdvancedHash_row4";

	

 



/**
 * [tAdvancedHash_row4 finally ] stop
 */



				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMysqlInput_4_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private java.util.Properties context_param = new java.util.Properties();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final Company_Migration Company_MigrationClass = new Company_Migration();

        int exitCode = Company_MigrationClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = Company_Migration.class.getClassLoader().getResourceAsStream("kylogger/company_migration_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
            }
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();


this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tMysqlInput_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMysqlInput_1) {
globalMap.put("tMysqlInput_1_SUBPROCESS_STATE", -1);

e_tMysqlInput_1.printStackTrace();

}
try {
errorCode = null;tMysqlInput_3Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMysqlInput_3) {
globalMap.put("tMysqlInput_3_SUBPROCESS_STATE", -1);

e_tMysqlInput_3.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : Company_Migration");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {


    }




		









    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();






        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     153181 characters generated by Talend Open Studio for Data Integration 
 *     on the 30 juillet 2017 00:55:22 CEST
 ************************************************************************************************/